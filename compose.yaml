# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
networks:
  all-in-one:
    external: false
volumes:
  data:
secrets:
  password:
    file: secret/password.txt
services:
  server:
    build:
      context: .
      dockerfile: Dockerfile
      cache_from:
        - ${PROJECT_NAME}:v0.0.1
    image: ${PROJECT_NAME}:v0.0.1
    container_name: ${PROJECT_NAME}
    networks:
      - all-in-one
    volumes:
      - ./log:/log
      - ./config.ini:/config.ini
      - data:/data # this is make data as permanent storage, so it will not be deleted when the container is deleted
      # you can also use the following to make the data as permanent storage
      # - ./data:/data this will mount the data folder in the current directory to the /data folder in the container
    environment:
      - TZ=Australia/Sydney
      - PASSWORD_FILE=/run/secrets/password
    secrets:
      - password
    # watch is for development only, remove it in production
    # watch will rebuild the image when the source code changes
    develop:
      watch:
        - action: rebuild
          path: .
      # ports:
      #   - 8000:8000

      # The commented out section below is an example of how to define a PostgreSQL
      # database that your application can use. `depends_on` tells Docker Compose to
      # start the database before your application. The `db-data` volume persists the
      # database data between container restarts. The `db-password` secret is used
      # to set the database password. You must create `db/password.txt` and add
      # a password of your choosing to it before running `docker compose up`.
      #     depends_on:
      #       db:
      #         condition: service_healthy
      #   db:
      #     image: postgres
      #     restart: always
      #     user: postgres
      #     secrets:
      #       - db-password
      #     volumes:
      #       - db-data:/var/lib/postgresql/data
      #     environment:
      #       - POSTGRES_DB=example
      #       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
      #     expose:
      #       - 5432
      #     healthcheck:
      #       test: [ "CMD", "pg_isready" ]
      #       interval: 10s
      #       timeout: 5s
      #       retries: 5
      # volumes:
      #   db-data:
      # secrets:
      #   db-password:
      #     file: db/password.txt
